@mixin burger($burgerWidth: 30px,
  $burgerHeight: 20px,
  $burgerColor: $title,
  $burgerLineHeight: 2px,
) {
  width: $burgerWidth;
  height: $burgerHeight;
  position: relative;
  color: $burgerColor;
  line-height: $burgerLineHeight;

  &__line {
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    width: 100%;
    height: $burgerLineHeight;
    background-color: currentColor;
    transition: transform 0.3s ease-in-out;
  }

  &::before,
  &::after {
    @include pseudo();
    left: 0;
    width: 100%;
    height: $burgerLineHeight;
    background-color: currentColor;
    transition: transform 0.3s ease-in-out, top 0.3s ease-in-out;
  }

  &::before {
    top: 0;
  }

  &::after {
    top: calc(100% - $burgerLineHeight);
  }
}

@mixin burger-close ($burgerCloseWidth: 21px,
  $burgerCloseHeight: 21px,
  $burgerCloseColor: $title,
  $burgerCloseRight: 20px,
  $burgerCloseTop: 57px,
) {
  width: $burgerCloseWidth;
  height: $burgerCloseHeight;
  position: absolute;
  right: $burgerCloseRight;
  top: $burgerCloseTop;
  z-index: 4;
  border: none;
  background-color: transparent;

  &::before,
  &::after {
    content: "";
    position: absolute;
    left: 0;
    width: 100%;
    height: 1px;
    border-radius: 2px;
    background-color: $burgerCloseColor;
    transition: transform 0.3s ease-in-out, top 0.3s ease-in-out;
  }

  &::before {
    transform: rotate(45deg);
    top: 50%;
    transition: transform 0.3s ease-in-out, top 0.3s ease-in-out;
  }

  &::after {
    transform: rotate(-45deg);
    top: 50%;
    transition: transform 0.3s ease-in-out, top 0.3s ease-in-out;
  }
}


@mixin line-clamp($lines: 1) {
  @if $lines <=1 {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  @else {
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
  }
}

@mixin font($size, $line-height, $weight, $style:normal) {
  font-size: $size;
  font-weight: $weight;
  line-height: $line-height;
}

@mixin pseudo($pos: absolute, $content: '') {
  content: $content;
  position: $pos;
}

$breakpoints: ("phone": 560px,
  "tablet": 768px,
  "tablet-2": 992px,
  "desktop": 1230px);

@mixin mq($width, $type: max) {
  @if map_has_key($breakpoints, $width) {
    $width: map_get($breakpoints, $width);

    @if $type==min {
      $width: $width - 1px;
    }

    @media only screen and (#{$type}-width: $width) {
      @content;
    }
  }
}

@mixin slickDots($dFlex: flex, $jcc: center) {
  .slick-dots {
    display: $dFlex;
    justify-content: $jcc;

    li {
      padding: 10px 0;

      &:not(:last-child) {
        margin-right: 15px;
      }

      button {
        padding: 0;
        font-size: 0;
        background-color: $title-sm;
        width: 15px;
        height: 15px;
        border-radius: 15px;
        transition: border-color 0.3s, background-color 0.3s, fill 0.3s, box-shadow 0.3s;

        &:hover {
          box-shadow: 0 0 0 2px rgba($default, 0.70);
          background-color: rgba($default, 0.50);
        }

        &:focus {
          box-shadow: 0 0 0 2px $default;
        }

        &:active {
          box-shadow: none;
          background-color: rgba($default, 0.50);

          .slider__arrow-icon {
            fill: $default;
          }
        }
      }

      &.slick-active {
        button {
          background-color: $default;
          box-shadow: none;
        }
      }
    }
  }
}